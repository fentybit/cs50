import os

from cs50 import SQL
from flask import Flask, flash, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.security import check_password_hash, generate_password_hash

from helpers import apology, login_required, lookup, usd
from datetime import datetime, timezone

# Configure application
app = Flask(__name__)

# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True

# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")

# Make sure API key is set
if not os.environ.get("API_KEY"):
    raise RuntimeError("API_KEY not set")


@app.after_request
def after_request(response):
    """Ensure responses aren't cached"""
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


@app.route("/")
@login_required
def index():
    """Show portfolio of stocks"""
    owns = own_shares()
    total = 0

    for symbol, shares in owns.items():
        result = lookup(symbol)
        name, price = result["name"], result["price"]
        stock_value = shares * price
        total += stock_value
        owns[symbol] = (name, shares, usd(price), usd(stock_value))

    cash = db.execute("SELECT cash FROM users WHERE id = ?", session["user_id"])[0]['cash']
    total += cash
    return render_template("index.html", owns=owns, cash = usd(cash), total = usd(total))


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock"""
    if request.method == "POST":
        symbol = request.form.get("symbol")
        result = lookup(symbol)

        if not result:
            return apology("Invalid ticker symbol.", 400)

        shares = request.form.get("shares")
        try:
            int(shares)
        except ValueError:
            return apology("Enter valid amount of shares.", 400)

        name = result["name"]
        price = result["price"]
        symbol = result["symbol"]
        shares = int(shares)

        if shares < 1:
            return apology("Enter valid amount of shares.", 400)

        if not shares or (shares % 1 != 0) or shares < 0:
            return apology("Number of shares must be a positive integer.", 400)

        user_id = session["user_id"]
        cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)[0]['cash']

        remain = cash - price * shares

        if remain < 0:
            return apology("Insufficient Cash. Failed Purchase.")

        db.execute("UPDATE users SET cash = ? WHERE id = ?", remain, user_id)

        db.execute ("INSERT INTO orders (user_id, symbol, shares, price, timestamp) VALUES (?, ?, ?, ?, ?)", user_id, symbol, shares, price, time_now())

        return redirect("/")
    else:
        return render_template("buy.html")


@app.route("/history")
@login_required
def history():
    """Show history of transactions"""
    rows = db.execute("SELECT symbol, shares, price, timestamp FROM orders WHERE user_id = ?", session["user_id"])
    return render_template("history.html", rows = rows)


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        # Query database for username
        rows = db.execute("SELECT * FROM users WHERE username = ?", request.form.get("username"))

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(rows[0]["hash"], request.form.get("password")):
            return apology("invalid username and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    """Get stock quote."""
    if request.method == "POST":
        symbol = request.form.get("symbol")
        result = lookup(symbol)

        if not result or symbol == "":
            return apology("Invalid ticker symbol.", 400)

        return render_template("quoted.html", name = result["name"], price = usd(result["price"]), symbol = result["symbol"])

    else:
        return render_template("quote.html")


@app.route("/register", methods=["GET", "POST"])
def register():
    """Register user"""
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        confirmation = request.form.get("confirmation")

        if username == "" or len(db.execute("SELECT username FROM users WHERE username = ?", username)) > 0:
            return apology("Invalid Username: Blank, or already exists.", 400)
        if password == "" or password != confirmation:
            return apology("Invalid Password: Blank, or does not match.", 400)

        db.execute("INSERT INTO users (username, hash) VALUES (?, ?)", username, generate_password_hash(password))

        rows = db.execute("SELECT * FROM users WHERE username = ?", username)

        session["user_id"] = rows[0]["id"]

        return redirect("/")

    else:
        return render_template("register.html")


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""
    owns = own_shares()

    if request.method == "POST":
        symbol = request.form.get("symbol")
        shares = int(request.form.get("shares"))

        if owns[symbol] < shares:
            return apology("You do not have enough shares quantity.", 400)

        result = lookup(symbol)
        user_id = session["user_id"]

        cash = db.execute("SELECT cash FROM users WHERE id = ?", user_id)[0]['cash']
        price = result["price"]
        remain = cash + price * shares

        db.execute("UPDATE users SET cash = ? WHERE id = ?", remain, user_id)

        db.execute("INSERT INTO orders (user_id, symbol, shares, price, timestamp) VALUES (?, ?, ?, ?, ?)", user_id, symbol, -shares, price, time_now())

        return redirect("/")

    else:
        return render_template("sell.html", owns = owns.keys())

def time_now():
    """Get current UTC date and time"""
    time = datetime.now(timezone.utc)
    return str(time.date()) + ' @time ' + time.time().strftime("%H:%M:%S")

def own_shares():
    """Stocks and number of shares the user owns"""
    user_id = session["user_id"]
    owns = {}

    query = db.execute("SELECT symbol, shares FROM orders WHERE user_id = ?", user_id)

    for q in query:
        symbol, shares = q["symbol"], q["shares"]
        owns[symbol] = shares

    return owns